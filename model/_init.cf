"""
    Copyright 2016 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import ip
import ip::services

entity ReplicaSet:
    """
        A mongo replica set
    """
    string name="rs01"
end

ReplicaSet rs_slave [0:1] -- [2:] MongoDB slave_servers
ReplicaSet rs_master [0:1] -- [1] MongoDB master_server

implement ReplicaSet using mongoServerMaster

entity MongoDB extends ip::services::Server:
    """
        Set up a single mongodb server
    """
    bool smallfiles=false
    ip::ip bindip="127.0.0.1"
end

entity Database extends std::State:
    """
        Mongodb database
    """
    string name
    bool purged=false
end

Database databases [0:] -- [1] MongoDB server

implement Database using std::none

implementation mongoServerFedora for MongoDB:
    pkg = std::Package(host=host, name="mongodb-server", state="installed")
    std::Package(host=host, name="mongodb", state="installed")
    svc = std::Service(host=host, name="mongod", state="running", onboot=true, requires=[pkg, cfg])
    cfg = std::ConfigFile(host=host, path="/etc/mongod.conf", requires=pkg, reload=true,
                          content=std::template("mongodb/mongodb.conf.tmpl"))
end

implementation mongoServerMaster for ReplicaSet:
    mongo = std::Service[host=master_server.host, name="mongod"]
    js = std::ConfigFile(host=master_server.host, path="/etc/mongors.js",
                        content=std::template("mongodb/mongors.js.tmpl"))
    exec::Run(host=master_server.host, command="mongo /etc/mongors.js", requires=[js, mongo])
end

implementation mongoServerEpel for MongoDB:
    pkg = std::Package(host=host, name="mongodb-server", state="installed")
    std::Package(host=host, name="mongodb", state="installed")
    svc = std::Service(host=host, name="mongod", state="running", onboot=true, requires=[pkg, cfg])
    cfg = std::ConfigFile(host=host, path="/etc/mongodb.conf", requires=pkg, reload=true,
                          content=std::template("mongodb/mongodb_epel.conf.tmpl"))
end

implementation mongoServerUbuntu for MongoDB:
    pkg = std::Package(host=host, name="mongodb-server", state="installed")
    std::Package(host=host, name="mongodb-clients", state="installed")
    svc = std::Service(host=host, name="mongodb", state="running", onboot=true, requires=[pkg, cfg])
    cfg = std::ConfigFile(host=host, path="/etc/mongodb.conf", requires=pkg, reload=true,
                          content=std::template("mongodb/mongodb_ubuntu.conf.tmpl"))
end

implement MongoDB using mongoServerFedora when std::familyof(host.os, "fedora")
implement MongoDB using mongoServerEpel when std::familyof(host.os, "rhel")
implement MongoDB using mongoServerUbuntu when std::familyof(host.os, "ubuntu")
